type Announcement {
  announcementId: String!
  company: String!
  id: ID!
  locationId: String!
  message: String!
  people: String!
  publishOn: UTCDateTime!
}

scalar DateTime

type Employee {
  displayName: String!
  id: ID!
  isPhotoUploaded: String!
  photoUrl: String!
}

type EmployeeEventCollection {
  anniversaryEmployees: [Employee!]!
  birthdayEmployees: [Employee!]!
  timeOffEmployees: [Employee!]!
}

type Event {
  createdAt: DateTime!
  externalId: String!
  id: ID!
  source: EventSource!
}

type EventCollection {
  all: [Event!]!
  count: EventCount!
}

type EventCount {
  githubCommit: Int!
  githubPull: Int!
  slackMessage: Int!
}

enum EventSource {
  """
  Github commit
  """
  githubCommit

  """
  Github pull request
  """
  githubPull

  """
  Slack message
  """
  slackMessage
}

type EventsWidget implements Widget {
  durationSeconds: Int!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String
}

type GuestsWidget implements Widget {
  """
  MojoTech announcements today
  """
  dayAnnouncements: [Announcement!]!
  durationSeconds: Int!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String
}

scalar IconIdToName

type Location {
  bathroomCode: String
  cityName: String!
  dayAnnouncements: [Announcement!]!
  id: ID!
  isPrimary: Boolean!
  latitude: Float!
  longitude: Float!
  moonPhase: Float!
  solarCycles: [SolarCycle!]!
  timeZone: String!
  trafficCams: [TrafficCam!]!
  weather: Weather!
  widgets: WidgetCollection!
  wifiName: String
  wifiPassword: String
}

type MojoTweet {
  createdAt: DateTime!
  interactions: TweetInteraction!
  media: TweetMedia
  status: String!
  text: String!
  user: TweetUser!
}

type Mutation {
  testField: String!
}

type NumbersWidget implements Widget {
  durationSeconds: Int!

  """
  MojoTech slack/github events
  """
  events(after: String, type: EventSource): EventCollection!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String
}

type Query {
  """
  Employee events from bambooHR
  """
  employeeEvents: EmployeeEventCollection!

  """
  MojoTech slack/github events
  """
  events(after: String, type: EventSource): EventCollection!

  """
  Target location to receive updates
  """
  location(
    """
    City name of location
    """
    cityName: String!
  ): Location!

  """
  Tweets from MojoTech
  """
  tweets: [MojoTweet!]!
}

type SolarCycle {
  time: String!
  type: String!
}

type Subscription {
  """
  An announcement was published
  """
  announcementPublished: Announcement!

  """
  Updated SHA value
  """
  deploymentSha: String!

  """
  An event was published to the API
  """
  eventPublished: Event!

  """
  Latest weather data retrieved
  """
  weatherPublished(latitude: Float!, longitude: Float!): Weather!
}

type TrafficCam {
  feedFormat: String!
  id: ID!
  title: String!
  url: String!
}

type TrafficWidget implements Widget {
  durationSeconds: Int!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String
  trafficCams: [TrafficCam!]!
}

type TweetImageType {
  id: Int!
  mediaUrl: String!
}

type TweetInteraction {
  favoriteCount: Int!
  retweetCount: Int!
}

type TweetMedia {
  images: [TweetImageType!]
  link: String
}

type TweetUser {
  avatar: String!
  handle: String!
  name: String!
}

type TwitterWidget implements Widget {
  durationSeconds: Int!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String

  """
  Tweets from MojoTech
  """
  tweets: [MojoTweet!]!
}

scalar UTCDateTime

scalar UnixDateTime

type Weather {
  current: WeatherCurrentlyDetail!
  daily: [WeatherDailyData!]!
  hourly: [WeatherHourlyData!]!
  lat: Float!
  lon: Float!
  minutely: [WeatherMinutelyData!]!
  moonPhase: Float! @deprecated(reason: "Moved to Location")
  offset: Int!
  timeZone: String!
}

type WeatherApparentTemperatureData {
  day: Float!
  eve: Float!
  morn: Float!
  night: Float!
}

type WeatherCurrentlyDetail {
  clouds: Float!
  dewPoint: Float!
  feelsLike: Float!
  humidity: Int!
  nearestStormBearing: Int!
  nearestStormDistance: Int!
  pressure: Int!
  temp: Float!
  time: UnixDateTime!
  uvi: Int!
  visibility: Int!
  weather: WeatherInfoData!
  windDeg: Int!
  windGust: Float
  windSpeed: Float!
}

type WeatherDailyData {
  clouds: Int!
  dewPoint: Int!
  feelsLike: WeatherApparentTemperatureData!
  humidity: Int!
  precipProbability: Float!
  pressure: Int!
  rain: Float
  sunrise: UnixDateTime!
  sunset: UnixDateTime!
  temp: WeatherTemperatureData!
  time: UnixDateTime!
  uvi: Int!
  weather: WeatherInfoData!
  windDeg: Int!
  windSpeed: Float!
}

type WeatherHourlyData {
  clouds: Int!
  dewPoint: Float!
  feelsLike: Float!
  humidity: Int!
  precipProbability: Float!
  pressure: Int!
  temp: Float!
  time: UnixDateTime!
  uvi: Int!
  visibility: Int!
  weather: WeatherInfoData!
  windDeg: Int!
  windGust: Float
  windSpeed: Float!
}

type WeatherInfoData {
  description: String!
  icon: IconIdToName!
  id: Int!
  main: String!
}

type WeatherMinutelyData {
  precipitation: Float!
  time: UnixDateTime!
}

type WeatherTemperatureData {
  day: Float!
  eve: Float!
  max: Float!
  min: Float!
  morn: Float!
  night: Float!
}

type WeatherWidget implements Widget {
  durationSeconds: Int!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String

  """
  Weather response from Dark Sky
  """
  weather: Weather!
}

"""
A single tab or panel of Helios
"""
interface Widget {
  durationSeconds: Int!
  id: Int!
  locationId: String!
  name: String!
  position: Int!
  showWeather: Boolean
  sidebarText: String
}

type WidgetCollection {
  byIdOrFirst(id: Int): Widget!
  enabled: [Widget!]!
  next(currentWidgetId: Int): Widget!
}